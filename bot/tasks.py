from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from asgiref.sync import async_to_sync, sync_to_async
from django.core.exceptions import ObjectDoesNotExist
from orders.models import Order, Profile, OrderProduct
from bot.bot_instance import get_bot
import telegram.error

print("‚úÖ bot.tasks –∑–∞–≥—Ä—É–∂–µ–Ω!")

# üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
OLD_STATUSES = {}

@receiver(pre_save, sender=Order)
def store_old_status(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º"""
    try:
        OLD_STATUSES[instance.pk] = Order.objects.get(pk=instance.pk).status
    except Order.DoesNotExist:
        OLD_STATUSES[instance.pk] = None

@receiver(post_save, sender=Order)
def order_status_changed(sender, instance, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    old_status = OLD_STATUSES.get(instance.pk)

    print(f"üîî Signal post_save triggered! Order #{instance.id}")
    print(f"‚ÑπÔ∏è Previous status: {old_status}")
    print(f"‚ÑπÔ∏è New status (instance): {instance.status}")

    if old_status != instance.status:
        print(f"üöÄ Calling send_order_notification for order #{instance.id}")
        async_to_sync(send_order_notification)(instance)
    else:
        print(f"‚ö†Ô∏è Order status has not changed. Notification not sent.")

async def send_order_notification(order):
    """Sends a notification to the user when the order status changes"""

    print(f"üì® Attempting to send notification for order #{order.id}")

    # üîπ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    profile = await sync_to_async(Profile.objects.filter(user=order.user).first)()

    if not profile or not profile.telegram_id:
        print(f"‚ö†Ô∏è No Telegram ID found for user {order.user}")
        return

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    order_products = await sync_to_async(list)(OrderProduct.objects.filter(order=order).select_related("product"))
    bouquets = ", ".join([item.product.name for item in order_products])

    message = (
        f"üå∏ <b>Your order #{order.id} has been updated!</b>\n"
        f"üìÖ <b>Delivery Date:</b> {order.delivery_date}\n"
        f"‚è∞ <b>Time:</b> {order.time}\n"
        f"üíê <b>Bouquets:</b> {bouquets if bouquets else 'No products listed'}\n"
        f"üì¶ <b>Status:</b> {order.get_status_display()}\n"
    )

    bot = get_bot()
    try:
        await bot.send_message(chat_id=profile.telegram_id, text=message, parse_mode="HTML")
        print(f"‚úÖ Notification sent to user {profile.telegram_id} for order #{order.id}")
    except telegram.error.TelegramError as e:
        print(f"‚ùå Error sending notification: {e}")
