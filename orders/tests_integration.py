from django.test import TestCase, Client
from django.urls import reverse
from orders.models import CustomUser, Product, CartItem, Order, OrderProduct

class IntegrationTest(TestCase):
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.client = Client()  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.user = CustomUser.objects.create_user(
            username="testuser@example.com",
            email="testuser@example.com",
            phone_number="+79001234567",
            address="Test Street 123",
            password="testpassword"
        )
        self.client.login(username="testuser", password="12345")  # –õ–æ–≥–∏–Ω–∏–º—Å—è

        self.product = Product.objects.create(name="Test Bouquet", price=100.0)

    def test_cart_to_order_integration(self):
        """–¢–µ—Å—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É -> –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ -> –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞"""
        CartItem.objects.create(user=self.user, product=self.product, quantity=2)

        # –õ–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        print(f"Logging in as: {self.user.email}, password: testpassword")
        login_successful = self.client.login(username=self.user.email, password="testpassword")
        print(f"Login successful: {login_successful}")
        assert login_successful, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥! –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        self.product = Product.objects.create(name="Test Bouquet", price=100.0)

        # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        response = self.client.post(reverse("cart"), data={
            "delivery_date": "2025-03-20",
            "time": "12:00-15:00",
            "address": "Test Address",
            "recipient": "John Doe"
        }, follow=True)

        # üîç –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
        print("Response status:", response.status_code)
        print("Response URL:", response.request["PATH_INFO"])  # –ü–æ–∫–∞–∂–µ—Ç, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        print("Form errors:", response.context["form"].errors if response.context and "form" in response.context else "No form context")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
        orders = Order.objects.filter(user=self.user)
        print("Existing orders in test DB:", list(Order.objects.values()))
        self.assertEqual(orders.count(), 1)

    def test_order_status_update(self):
        """–¢–µ—Å—Ç: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        order = Order.objects.create(user=self.user, status="pending")

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = "delivered"
        order.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
        updated_order = Order.objects.get(id=order.id)
        self.assertEqual(updated_order.status, "delivered")